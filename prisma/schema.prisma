// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================
enum UserStatus {
  PENDING    // Email not verified
  ACTIVE     // Fully active user
  SUSPENDED  // Temporarily disabled
  DELETED    // Soft deleted
}

// ==================== USER & PROFILE ====================
model User {
  id                String      @id @default(uuid())
  email             String      @unique
  emailVerified     Boolean     @default(false)
  emailVerifiedAt   DateTime?
  passwordHash      String
  status            UserStatus  @default(PENDING)
  lastLoginAt       DateTime?
  lastLoginIp       String?
  failedLoginCount  Int         @default(0)
  lockedUntil       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  profile           Profile?
  sessions          Session[]
  refreshTokens     RefreshToken[]
  organizationUsers OrganizationUser[]
  emailVerifications EmailVerification[]
  passwordResets    PasswordReset[]
  passwordHistories PasswordHistory[]
  auditLogs         AuditLog[]
  
  @@index([email])
  @@index([status])
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  firstName   String
  lastName    String
  avatarUrl   String?
  phoneNumber String?
  timezone    String    @default("UTC")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ==================== SESSIONS & TOKENS ====================
model Session {
  id         String    @id @default(uuid())
  userId     String
  ipAddress  String?
  userAgent  String?
  isActive   Boolean   @default(true)
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshTokens RefreshToken[]
  
  @@index([userId])
  @@index([expiresAt])
  @@index([isActive])
}

model RefreshToken {
  id          String    @id @default(uuid())
  userId      String
  sessionId   String
  token       String    @unique
  family      String    @default(uuid())
  deviceId    String?
  ipAddress   String?
  userAgent   String?
  isRevoked   Boolean   @default(false)
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
  @@index([sessionId])
  @@index([family])
}

// ==================== ORGANIZATIONS ====================
model Organization {
  id            String    @id @default(uuid())
  name          String    @unique
  slug          String    @unique
  logoUrl       String?
  defaultRoleId String?
  settings      Json      @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  defaultRole       Role?              @relation("DefaultRole", fields: [defaultRoleId], references: [id])
  organizationUsers OrganizationUser[]
  roles             Role[]             @relation("OrganizationRoles")
  invitations       Invitation[]
  
  @@index([slug])
}

model OrganizationUser {
  id             String    @id @default(uuid())
  userId         String
  organizationId String
  roleId         String
  joinedAt       DateTime  @default(now())
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role         Role         @relation(fields: [roleId], references: [id])
  
  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

// ==================== RBAC ====================
model Role {
  id             String    @id @default(uuid())
  organizationId String?
  name           String
  description    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  organization           Organization?      @relation("OrganizationRoles", fields: [organizationId], references: [id], onDelete: Cascade)
  organizationsAsDefault Organization[]     @relation("DefaultRole")
  rolePermissions        RolePermission[]
  organizationUsers      OrganizationUser[]
  
  @@unique([organizationId, name])
  @@index([organizationId])
}

model Permission {
  id          String    @id @default(uuid())
  resource    String
  action      String
  description String?
  createdAt   DateTime  @default(now())
  
  rolePermissions RolePermission[]
  
  @@unique([resource, action])
  @@index([resource])
}

model RolePermission {
  id           String    @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime  @default(now())
  
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// ==================== EMAIL & PASSWORD ====================
model EmailVerification {
  id        String    @id @default(uuid())
  userId    String
  email     String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

model PasswordReset {
  id        String    @id @default(uuid())
  userId    String
  email     String
  token     String    @unique
  usedAt    DateTime?
  expiresAt DateTime
  createdAt DateTime  @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

model PasswordHistory {
  id           String    @id @default(uuid())
  userId       String
  passwordHash String
  createdAt    DateTime  @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}

// ==================== INVITATIONS ====================
model Invitation {
  id             String    @id @default(uuid())
  organizationId String
  email          String
  roleId         String
  token          String    @unique
  acceptedAt     DateTime?
  expiresAt      DateTime
  createdAt      DateTime  @default(now())
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, email])
  @@index([token])
  @@index([email])
}

// ==================== SECURITY ====================
model AuditLog {
  id             String    @id @default(uuid())
  userId         String?
  organizationId String?
  action         String
  resource       String
  resourceId     String?
  details        Json?
  ipAddress      String?
  createdAt      DateTime  @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([organizationId])
  @@index([action])
  @@index([createdAt])
}